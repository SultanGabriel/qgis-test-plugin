# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BiometrixTestDialog
                                 A QGIS plugin
 BiometrixTest
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-29
        git sha              : $Format:%H$
        copyright            : (C) 2025 by AWSI
        email                : gabriel.sultan@aws-institut.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import (
    QgsWkbTypes,
    QgsProject,
    QgsMapLayer,
    QgsVectorFileWriter,
    QgsVectorLayer,
    QgsField,
    QgsFeature,
    QgsProject,
    QgsGeometry,
    QgsSymbol,
    QgsRendererCategory,
    QgsCategorizedSymbolRenderer,
    QgsFields
)
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtCore import QVariant
from PyQt5.QtGui import QColor


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'BiometrixTest_dialog_base.ui'))


class BiometrixTestDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        super(BiometrixTestDialog, self).__init__(parent)
        self.setupUi(self)

        self.layer_select.currentIndexChanged.connect(self.display_layer_info)
        self.btn_refresh.clicked.connect(self.populate_layer_list)
        self.btn_export.clicked.connect(self.export_to_geojson)
        self.btn_draw_example.clicked.connect(self.draw_example_layer)

        self.populate_layer_list()

    def populate_layer_list(self):
        self.layer_select.clear()
        self.layer_map = {}

        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            layer_name = layer.name()
            self.layer_select.addItem(layer_name)
            self.layer_map[layer_name] = layer

        self.display_layer_info()

    def display_layer_info(self):
        selected_name = self.layer_select.currentText()
        layer = self.layer_map.get(selected_name)

        if not layer:
            self.text_output.setPlainText("No layer selected.")
            return

        info_lines = [f"Layer Name: {layer.name()}",
                      f"Layer Type: {layer.type()}"]

        if layer.type() == QgsMapLayer.VectorLayer:
            features = layer.getFeatures()
            for feat in features:
                fid = feat.id()
                geom = feat.geometry()
                geom_type = QgsWkbTypes.displayString(geom.wkbType())
                geom_text = geom.asWkt()[:500]  # Limit WKT output length

                attrs = feat.attributes()
                info_lines.append(f"\nFeature ID: {fid}")
                info_lines.append(f"  Geometry: {geom_type}")
                info_lines.append(f"Geometry (WKT): {geom_text}")
                info_lines.append(f"  Attributes: {attrs}")
        elif layer.type() == QgsMapLayer.RasterLayer:
            provider = layer.dataProvider()
            extent = layer.extent().toString()
            info_lines.append(f"Raster source: {layer.source()}")
            info_lines.append(f"Extent: {extent}")
            info_lines.append(f"Band Count: {provider.bandCount()}")
        else:
            info_lines.append("Unsupported layer type.")

        self.text_output.setPlainText("\n".join(info_lines))

    def export_to_geojson(self):
        selected_name = self.layer_select.currentText()
        layer = self.layer_map.get(selected_name)

        if not layer or layer.type() != QgsMapLayer.VectorLayer:
            QtWidgets.QMessageBox.warning(
                self, "Export Error", "Only Vector Layers can be exported. Please select one.")
            return

        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "Save GeoJSON", f"{layer.name()}.geojson", "GeoJSON Files (*.geojson)")
        if not path:
            return

        error = QgsVectorFileWriter.writeAsVectorFormat(
            layer, path, "UTF-8", layer.crs(), "GeoJSON")

        if error[0] == QgsVectorFileWriter.NoError:
            QtWidgets.QMessageBox.information(
                self, "Success", f"Layer exported to:\n{path}")
        else:
            QtWidgets.QMessageBox.critical(
                self, "Export Failed", f"Failed to export layer.\nReason: {error[1]}")

    def draw_example_layer(self):
        # Create dummy data (3 polygons with different "class" values)
        geometries_with_preds = [
            (QgsGeometry.fromWkt("POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))"), "Forest"),
            (QgsGeometry.fromWkt("POLYGON((20 0, 20 10, 30 10, 30 0, 20 0))"), "Urban"),
            (QgsGeometry.fromWkt("POLYGON((40 0, 40 10, 50 10, 50 0, 40 0))"), "Water")
        ]

        # Set up memory vector layer
        vl = QgsVectorLayer("Polygon?crs=EPSG:4326",
                            "Biometrix Predictions", "memory")
        pr = vl.dataProvider()
        pr.addAttributes([QgsField("class", QVariant.String)])
        vl.updateFields()

        # Add features
        feats = []
        for geom, label in geometries_with_preds:
            feat = QgsFeature()
            feat.setGeometry(geom)
            feat.setAttributes([label])
            feats.append(feat)
        pr.addFeatures(feats)
        vl.updateExtents()

        # Apply categorized symbology
        categories = []
        colors = {"Forest": "green", "Urban": "gray", "Water": "blue"}
        for class_name, color in colors.items():
            symbol = QgsSymbol.defaultSymbol(vl.geometryType())
            symbol.setColor(QColor(color))
            cat = QgsRendererCategory(class_name, symbol, class_name)
            categories.append(cat)
        renderer = QgsCategorizedSymbolRenderer("class", categories)
        vl.setRenderer(renderer)

        # Add layer to project
        QgsProject.instance().addMapLayer(vl)

